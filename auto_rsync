#!/bin/bash

# Functions
function syntax() {
    echo "Error: $1"
    echo "Usage: `basename $0` [-q] -u <rsync_user> -p <rsync_password_file> -t <IP> -s <source_folder> -r <remote_folder>"
    exit 1
}

function config() {
    echo "Using the following configuration:"
    echo "- project : $PROJNAME"
    echo "- base    : $SRCFOLDR"
    echo "- includes: $INCLDIRS"
    echo "- excludes: $EXCLDIRS"
    echo "- filtersP: $EXCFILTS"
    echo "- filtersH: $HIDFILTS"
    echo "- rsyncmod: $RSYNCMOD"
    echo "- rsyncusr: $RSYNCUSR"
    echo "- rsyncpwd: $RSYNCPWD"
    echo "- target  : $RSYNCTRG"
    echo "- rsync   : $CMD"
}

# Check arguments
if [[ $# -lt 1 ]]; then
    syntax 'Missing parameters'
fi

# check other arguments if any
RSYNCUSR='vagrant'
RSYNCPWD="$HOME/bin/rsync.pwd"
LOOP_DELAY=0.5
VERBOSE=1
while getopts ":qp:r:s:t:u:" opt
do
    case $opt in
        p) RSYNCPWD="$OPTARG"
            ;;
        q) VERBOSE=0
            ;;
        r) PROJNAME="$OPTARG"
            ;;
        s) SRCFOLDR="$OPTARG"
            ;;
        t) RSYNCTRG="$OPTARG"
            ;;
        u) RSYNCUSR="$OPTARG"
            ;;
        :) echo "Option $OPTARGS requires a value"
            exit 1
            ;;
    esac
done

# Configuration
#PROJNAME="$(basename $SRCFOLDR)"
INCLDIRS='app cake lib bin config plugins src tests vendor vendors vendors/fpdf17 vendors/shells vendors/slinky vendors/twitter webroot build websrc scripts keys'
#INCFILES='Vagrantfile README'
#INCFILES='index.php composer.json composer.lock'
INCFILES='index.php package.json package-lock.json composer.* webpack.* app.sh app/webroot/test.php'
#EXCLDIRS='webroot/min app/webroot/min puppet app/tmp app/tmp/logs'
EXCLDIRS='webroot/min app/webroot/min'
#EXCFILES='*.tags .ctags.* *.cache .vimrc app.php'
EXCFILES='*.tags .ctags.* *.cache .vimrc config/app.php'
#EXCFILTS='vendor logs/*** webroot/min/*** app/webroot/min/*** app/tmp/*** app/tmp/logs/*** ***/node_modules'
EXCFILTS='webroot/min/*** ***/node_modules' # cakephp 2
PRTFILTS='vendor/*** vendors/***' # cakephp 2
#EXCFILTS='logs/*** webroot/min/*** app/webroot/min/*** app/tmp/*** ***/node_modules' # cakephp 1
#HIDFILTS='vendor tmp/*** logs/*** app/tmp/*** app/logs/*** build/*** webroot/min/***'
#HIDFILTS='vendors/*** app/tmp app/logs webroot/min' # cakephp 2
HIDFILTS='vendor/*** vendors/*** webroot/min' # cakephp 2
#HIDFILTS='app/tmp app/logs webroot/min app/webroot/min' # cakephp 1
RSYNCCMD=$(which rsync)
RSYNCMOD='tom'

WATCHPRG="$(which inotifywait)"
#WATCHOPT='--quiet --quiet --recursive --event modify --event attrib --event close_write --event move --event move_self --event create --event delete --event delete_self --exclude \.git'
WATCHOPT='--quiet --recursive --event modify --event attrib --event close_write --event move --event move_self --event create --event delete --event delete_self --exclude "(\.git|\.php\.tags|\.js\.tags)"'
WATCHCMD="$WATCHPRG $WATCHOPT $SRCFOLDR"

# Check if source exists
if [[ ! -d "$SRCFOLDR" ]]; then
    syntax "Project <$SRCFOLDR> directory not found"
fi

# Build rsync options
#RSYNC_OPTIONS='--verbose --info=flist1,stats0,skip1,remove1 --compress --archive --omit-dir-times --human-readable --delete-after '
RSYNC_OPTIONS='--itemize-changes --compress --archive --omit-dir-times --human-readable --delete-after '
for EXC in $EXCLDIRS; do
    #RSYNC_OPTIONS+="--exclude='$EXC/*' "
    RSYNC_OPTIONS+="--exclude='$EXC' "
done
for EXC in $EXCFILES; do
    RSYNC_OPTIONS+="--exclude='$EXC' "
done
#for FLT in $HIDFILTS; do
    #RSYNC_OPTIONS+="--filter='hide $FLT' "
#done
for FLT in $EXCFILTS; do
    RSYNC_OPTIONS+="--filter='protect $FLT' "
done
for INC in $INCLDIRS; do
    RSYNC_OPTIONS+="--include='$INC/***' "
    #RSYNC_OPTIONS+="--include='$INC' "
done
for INC in $INCFILES; do
    RSYNC_OPTIONS+="--include='$INC' "
done
RSYNC_OPTIONS+="--exclude='*' "
RSYNC_OPTIONS+="--password-file=$RSYNCPWD"

# Prepare command
CMD="$RSYNCCMD ${RSYNC_OPTIONS[@]} $SRCFOLDR $RSYNCUSR@$RSYNCTRG::$RSYNCMOD/$PROJNAME/"

# Show configuration
[[ $VERBOSE -eq 1 ]] && config

# Start
echo -e "\033[1;33m...start and wait...\033[0m"
while eval $WATCHCMD
do
    echo -e "\033[1;33m...syncing...\033[0m"
    RESULT=$(eval $CMD)
    if [ -n "$RESULT" ]; then
        DATE=$(date '+%d/%m/%Y %H:%M:%S')
        echo -e "$RESULT\n\033[1;33m...synchronized at $DATE ...\n...waiting for change...\033[0m"
    fi
    #sleep $LOOP_DELAY
done

# Do rsync
eval $CMD
